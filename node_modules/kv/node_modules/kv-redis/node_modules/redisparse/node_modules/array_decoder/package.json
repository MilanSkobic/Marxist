{
  "name": "array_decoder",
  "version": "0.1.0",
  "description": "Like string_decoder but for arrays",
  "main": "array_decoder.js",
  "scripts": {
    "test": "node test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tonistiigi/array_decoder.git"
  },
  "keywords": [
    "string_decoder",
    "array",
    "stream"
  ],
  "author": {
    "name": "TÃµnis Tiigi",
    "email": "tonistiigi@gmail.com"
  },
  "license": "MIT",
  "readme": "## Array Decoder\n\nThis class can be used to stream arrays of data when chunks may end with partial elements. Similar to string decoder but for arrays.\n\n### Installation\n\n```\nnpm install array_decoder\n```\n\n### Usage\n\n```\nvar ArrayDecoder = require('array_decoder').ArrayDecoder\n\nvar decoder = new ArrayDecoder\n\n// Outputs: ['abc', 'def']\nconsole.log(decoder.write(['abc', 'def', 'gh']))\n\n// Outputs: ['ghi', 'jkl']\nconsole.log(decoder.write(['i', 'jkl', 'mn']))\n\n// Outputs: ['mnl']\nconsole.log(decoder.write(['l'], true))\n```\n\n### new ArrayDecoder([format])\n\nOutput can be `string` or `buffer`. If not specified it will be as input.\n\n### write(array, complete)\n\n`array` - Array of strings, buffers or array of arrays of string or buffers.\n`complete` - Set to true for last chunk.",
  "readmeFilename": "README.md",
  "_id": "array_decoder@0.1.0",
  "dist": {
    "shasum": "2a15a3ef6ea4f9f4db020ef105a31f7cc41c7729",
    "tarball": "http://registry.npmjs.org/array_decoder/-/array_decoder-0.1.0.tgz"
  },
  "_npmVersion": "1.1.66",
  "_npmUser": {
    "name": "tonistiigi",
    "email": "tonistiigi@gmail.com"
  },
  "maintainers": [
    {
      "name": "tonistiigi",
      "email": "tonistiigi@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "2a15a3ef6ea4f9f4db020ef105a31f7cc41c7729",
  "_from": "array_decoder@>=0.1.0",
  "_resolved": "https://registry.npmjs.org/array_decoder/-/array_decoder-0.1.0.tgz"
}
